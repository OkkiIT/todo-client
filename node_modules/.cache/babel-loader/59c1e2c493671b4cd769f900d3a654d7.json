{"ast":null,"code":"var _jsxFileName = \"/Users/okki/Desktop/todoapp2/client/src/components/Todo/index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { deleteTodo, editTodo } from \"../../store/actions\";\nimport { renderHighlightedText } from \"../../utils\";\nimport { InputWithHighlight } from \"../../components\";\nimport { TodoContainer } from \"./styled\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Todo = _ref => {\n  _s();\n\n  let {\n    todo\n  } = _ref;\n  const dispatch = useDispatch();\n  const inputRef = useRef();\n  const [inEditMode, setInEditMode] = useState(false);\n  const [editedText, setEditedText] = useState(todo.text);\n\n  const switchEditMode = () => setInEditMode(prevState => !prevState);\n\n  const dispatchTodoEdit = () => dispatch(editTodo({\n    id: todo.id,\n    text: inputRef.current.value,\n    onSuccess: onSuccessEdit\n  }));\n\n  const onSuccessEdit = () => {\n    setInEditMode(false);\n  };\n\n  const dispatchTodoDelete = () => dispatch(deleteTodo({\n    id: todo.id\n  }));\n\n  const cancelTextEdit = () => {\n    inputRef.current.value = todo.text;\n    switchEditMode();\n  };\n\n  const onChange = () => {\n    setEditedText(inputRef.current.value);\n  };\n\n  return /*#__PURE__*/_jsxDEV(TodoContainer, {\n    children: [inEditMode ? /*#__PURE__*/_jsxDEV(InputWithHighlight, {\n      inputRef: inputRef,\n      text: editedText,\n      onChange: onChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: renderHighlightedText(todo.text)\n    }, void 0, false), inEditMode ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: dispatchTodoEdit,\n        children: \"Confirm\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: cancelTextEdit,\n        children: \"Cancel\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: switchEditMode,\n      children: \"Edit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: dispatchTodoDelete,\n      children: \"Delete\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Todo, \"6sgChnzNLHb8qeOqsXG0Zy+d+AY=\", false, function () {\n  return [useDispatch];\n});\n\n_c = Todo;\nexport default Todo;\n\nvar _c;\n\n$RefreshReg$(_c, \"Todo\");","map":{"version":3,"sources":["/Users/okki/Desktop/todoapp2/client/src/components/Todo/index.js"],"names":["React","useRef","useState","useDispatch","deleteTodo","editTodo","renderHighlightedText","InputWithHighlight","TodoContainer","Todo","todo","dispatch","inputRef","inEditMode","setInEditMode","editedText","setEditedText","text","switchEditMode","prevState","dispatchTodoEdit","id","current","value","onSuccess","onSuccessEdit","dispatchTodoDelete","cancelTextEdit","onChange"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,MAAhB,EAAwBC,QAAxB,QAAwC,OAAxC;AACA,SAASC,WAAT,QAA4B,aAA5B;AAEA,SAASC,UAAT,EAAqBC,QAArB,QAAqC,qBAArC;AACA,SAASC,qBAAT,QAAsC,aAAtC;AACA,SAASC,kBAAT,QAAmC,kBAAnC;AACA,SAAQC,aAAR,QAA4B,UAA5B;;;;AAEA,MAAMC,IAAI,GAAG,QAAc;AAAA;;AAAA,MAAb;AAAEC,IAAAA;AAAF,GAAa;AACzB,QAAMC,QAAQ,GAAGR,WAAW,EAA5B;AACA,QAAMS,QAAQ,GAAGX,MAAM,EAAvB;AACA,QAAM,CAACY,UAAD,EAAaC,aAAb,IAA8BZ,QAAQ,CAAC,KAAD,CAA5C;AACA,QAAM,CAACa,UAAD,EAAaC,aAAb,IAA8Bd,QAAQ,CAACQ,IAAI,CAACO,IAAN,CAA5C;;AAEA,QAAMC,cAAc,GAAG,MAAMJ,aAAa,CAAEK,SAAD,IAAe,CAACA,SAAjB,CAA1C;;AAEA,QAAMC,gBAAgB,GAAG,MACvBT,QAAQ,CACNN,QAAQ,CAAC;AACPgB,IAAAA,EAAE,EAAEX,IAAI,CAACW,EADF;AAEPJ,IAAAA,IAAI,EAAEL,QAAQ,CAACU,OAAT,CAAiBC,KAFhB;AAGPC,IAAAA,SAAS,EAAEC;AAHJ,GAAD,CADF,CADV;;AAQA,QAAMA,aAAa,GAAG,MAAM;AAC1BX,IAAAA,aAAa,CAAC,KAAD,CAAb;AACD,GAFD;;AAGA,QAAMY,kBAAkB,GAAG,MAAMf,QAAQ,CAACP,UAAU,CAAC;AAAEiB,IAAAA,EAAE,EAAEX,IAAI,CAACW;AAAX,GAAD,CAAX,CAAzC;;AAEA,QAAMM,cAAc,GAAG,MAAM;AAC3Bf,IAAAA,QAAQ,CAACU,OAAT,CAAiBC,KAAjB,GAAyBb,IAAI,CAACO,IAA9B;AACAC,IAAAA,cAAc;AACf,GAHD;;AAKA,QAAMU,QAAQ,GAAG,MAAM;AACrBZ,IAAAA,aAAa,CAACJ,QAAQ,CAACU,OAAT,CAAiBC,KAAlB,CAAb;AACD,GAFD;;AAIA,sBACE,QAAC,aAAD;AAAA,eACGV,UAAU,gBACT,QAAC,kBAAD;AACE,MAAA,QAAQ,EAAED,QADZ;AAEE,MAAA,IAAI,EAAEG,UAFR;AAGE,MAAA,QAAQ,EAAEa;AAHZ;AAAA;AAAA;AAAA;AAAA,YADS,gBAOT;AAAA,gBAAGtB,qBAAqB,CAACI,IAAI,CAACO,IAAN;AAAxB,qBARJ,EAUGJ,UAAU,gBACT;AAAA,8BACE;AAAQ,QAAA,OAAO,EAAEO,gBAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAQ,QAAA,OAAO,EAAEO,cAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YADS,gBAMT;AAAQ,MAAA,OAAO,EAAET,cAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAhBJ,eAkBE;AAAQ,MAAA,OAAO,EAAEQ,kBAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAlBF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAsBD,CApDD;;GAAMjB,I;UACaN,W;;;KADbM,I;AAsDN,eAAeA,IAAf","sourcesContent":["import React, { useRef, useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\n\nimport { deleteTodo, editTodo } from \"../../store/actions\";\nimport { renderHighlightedText } from \"../../utils\";\nimport { InputWithHighlight } from \"../../components\";\nimport {TodoContainer} from \"./styled\";\n\nconst Todo = ({ todo }) => {\n  const dispatch = useDispatch();\n  const inputRef = useRef();\n  const [inEditMode, setInEditMode] = useState(false);\n  const [editedText, setEditedText] = useState(todo.text);\n\n  const switchEditMode = () => setInEditMode((prevState) => !prevState);\n\n  const dispatchTodoEdit = () =>\n    dispatch(\n      editTodo({\n        id: todo.id,\n        text: inputRef.current.value,\n        onSuccess: onSuccessEdit,\n      })\n    );\n  const onSuccessEdit = () => {\n    setInEditMode(false);\n  };\n  const dispatchTodoDelete = () => dispatch(deleteTodo({ id: todo.id }));\n\n  const cancelTextEdit = () => {\n    inputRef.current.value = todo.text;\n    switchEditMode();\n  };\n\n  const onChange = () => {\n    setEditedText(inputRef.current.value);\n  };\n\n  return (\n    <TodoContainer>\n      {inEditMode ? (\n        <InputWithHighlight\n          inputRef={inputRef}\n          text={editedText}\n          onChange={onChange}\n        />\n      ) : (\n        <>{renderHighlightedText(todo.text)}</>\n      )}\n      {inEditMode ? (\n        <div>\n          <button onClick={dispatchTodoEdit}>Confirm</button>\n          <button onClick={cancelTextEdit}>Cancel</button>\n        </div>\n      ) : (\n        <button onClick={switchEditMode}>Edit</button>\n      )}\n      <button onClick={dispatchTodoDelete}>Delete</button>\n    </TodoContainer>\n  );\n};\n\nexport default Todo;\n"]},"metadata":{},"sourceType":"module"}