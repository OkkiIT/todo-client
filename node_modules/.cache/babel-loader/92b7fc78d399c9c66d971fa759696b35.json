{"ast":null,"code":"import { CREATE_TAG, DELETE_TAG, EDIT_TAG, GET_TAGS } from \"../actionTypes\";\nimport { createTag, deleteTag, editTag, getTags } from \"../../services/tags\";\nimport { getTagsFailure, getTagsSuccess, editTagFailure, editTagSuccess, deleteTagFailure, deleteTagSuccess, createTagFailure, createTagSuccess } from \"../actions\";\nimport { all, call, put, takeLatest, takeEvery } from \"redux-saga/effects\";\n\nfunction* getTagsSaga() {\n  try {\n    const {\n      data\n    } = yield call(getTags);\n    yield put(getTagsSuccess(data));\n  } catch (error) {\n    yield put(getTagsFailure(error));\n  }\n}\n\nfunction* createTagSaga(_ref) {\n  let {\n    payload\n  } = _ref;\n\n  try {\n    const {\n      data\n    } = yield call(createTag, payload);\n    yield put(createTagSuccess(data));\n  } catch (error) {\n    yield put(createTagFailure(error));\n  }\n}\n\nfunction* editTagSaga(_ref2) {\n  let {\n    payload: {\n      id,\n      text\n    }\n  } = _ref2;\n\n  try {\n    const {\n      data\n    } = yield call(editTag, id, text);\n    yield put(editTagSuccess(data));\n  } catch (error) {\n    yield put(editTagFailure(error));\n  }\n}\n\nfunction* deleteTagSaga(_ref3) {\n  let {\n    payload: {\n      id\n    }\n  } = _ref3;\n\n  try {\n    const {\n      data\n    } = yield call(deleteTag, id);\n    yield put(deleteTagSuccess(data));\n  } catch (error) {\n    yield put(deleteTagFailure(error));\n  }\n}\n\nexport default function* tagsSaga() {\n  yield all([takeLatest(GET_TAGS.START, getTagsSaga), takeLatest(EDIT_TAG.START, editTagSaga), takeLatest(DELETE_TAG.START, deleteTagSaga), takeLatest(CREATE_TAG.START, createTagSaga)]);\n}","map":{"version":3,"sources":["/Users/okki/Desktop/todoapp2/client/src/store/sagas/tags.js"],"names":["CREATE_TAG","DELETE_TAG","EDIT_TAG","GET_TAGS","createTag","deleteTag","editTag","getTags","getTagsFailure","getTagsSuccess","editTagFailure","editTagSuccess","deleteTagFailure","deleteTagSuccess","createTagFailure","createTagSuccess","all","call","put","takeLatest","takeEvery","getTagsSaga","data","error","createTagSaga","payload","editTagSaga","id","text","deleteTagSaga","tagsSaga","START"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,UAArB,EAAiCC,QAAjC,EAA2CC,QAA3C,QAA2D,gBAA3D;AACA,SAASC,SAAT,EAAoBC,SAApB,EAA+BC,OAA/B,EAAwCC,OAAxC,QAAuD,qBAAvD;AACA,SACEC,cADF,EAEEC,cAFF,EAGEC,cAHF,EAIEC,cAJF,EAKEC,gBALF,EAMEC,gBANF,EAOEC,gBAPF,EAQEC,gBARF,QASO,YATP;AAUA,SAASC,GAAT,EAAcC,IAAd,EAAoBC,GAApB,EAAyBC,UAAzB,EAAoCC,SAApC,QAAoD,oBAApD;;AAEA,UAAUC,WAAV,GAAwB;AACtB,MAAI;AACF,UAAM;AAAEC,MAAAA;AAAF,QAAW,MAAML,IAAI,CAACV,OAAD,CAA3B;AACA,UAAMW,GAAG,CAACT,cAAc,CAACa,IAAD,CAAf,CAAT;AACD,GAHD,CAGE,OAAOC,KAAP,EAAc;AACd,UAAML,GAAG,CAACV,cAAc,CAACe,KAAD,CAAf,CAAT;AACD;AACF;;AAED,UAAUC,aAAV,OAAqC;AAAA,MAAb;AAAEC,IAAAA;AAAF,GAAa;;AACnC,MAAI;AACF,UAAM;AAAEH,MAAAA;AAAF,QAAW,MAAML,IAAI,CAACb,SAAD,EAAYqB,OAAZ,CAA3B;AACA,UAAMP,GAAG,CAACH,gBAAgB,CAACO,IAAD,CAAjB,CAAT;AACD,GAHD,CAGE,OAAOC,KAAP,EAAc;AACd,UAAML,GAAG,CAACJ,gBAAgB,CAACS,KAAD,CAAjB,CAAT;AACD;AACF;;AAED,UAAUG,WAAV,QAAiD;AAAA,MAA3B;AAAED,IAAAA,OAAO,EAAE;AAAEE,MAAAA,EAAF;AAAMC,MAAAA;AAAN;AAAX,GAA2B;;AAC/C,MAAI;AACF,UAAM;AAAEN,MAAAA;AAAF,QAAW,MAAML,IAAI,CAACX,OAAD,EAAUqB,EAAV,EAAcC,IAAd,CAA3B;AACA,UAAMV,GAAG,CAACP,cAAc,CAACW,IAAD,CAAf,CAAT;AACD,GAHD,CAGE,OAAOC,KAAP,EAAc;AACd,UAAML,GAAG,CAACR,cAAc,CAACa,KAAD,CAAf,CAAT;AACD;AACF;;AAED,UAAUM,aAAV,QAA6C;AAAA,MAArB;AAAEJ,IAAAA,OAAO,EAAE;AAAEE,MAAAA;AAAF;AAAX,GAAqB;;AAC3C,MAAI;AACF,UAAM;AAAEL,MAAAA;AAAF,QAAW,MAAML,IAAI,CAACZ,SAAD,EAAYsB,EAAZ,CAA3B;AACA,UAAMT,GAAG,CAACL,gBAAgB,CAACS,IAAD,CAAjB,CAAT;AACD,GAHD,CAGE,OAAOC,KAAP,EAAc;AACd,UAAML,GAAG,CAACN,gBAAgB,CAACW,KAAD,CAAjB,CAAT;AACD;AACF;;AAED,eAAe,UAAUO,QAAV,GAAqB;AAClC,QAAMd,GAAG,CAAC,CACRG,UAAU,CAAChB,QAAQ,CAAC4B,KAAV,EAAiBV,WAAjB,CADF,EAERF,UAAU,CAACjB,QAAQ,CAAC6B,KAAV,EAAiBL,WAAjB,CAFF,EAGRP,UAAU,CAAClB,UAAU,CAAC8B,KAAZ,EAAmBF,aAAnB,CAHF,EAIRV,UAAU,CAACnB,UAAU,CAAC+B,KAAZ,EAAmBP,aAAnB,CAJF,CAAD,CAAT;AAMD","sourcesContent":["import { CREATE_TAG, DELETE_TAG, EDIT_TAG, GET_TAGS } from \"../actionTypes\";\nimport { createTag, deleteTag, editTag, getTags } from \"../../services/tags\";\nimport {\n  getTagsFailure,\n  getTagsSuccess,\n  editTagFailure,\n  editTagSuccess,\n  deleteTagFailure,\n  deleteTagSuccess,\n  createTagFailure,\n  createTagSuccess,\n} from \"../actions\";\nimport { all, call, put, takeLatest,takeEvery} from \"redux-saga/effects\";\n\nfunction* getTagsSaga() {\n  try {\n    const { data } = yield call(getTags);\n    yield put(getTagsSuccess(data));\n  } catch (error) {\n    yield put(getTagsFailure(error));\n  }\n}\n\nfunction* createTagSaga({ payload }) {\n  try {\n    const { data } = yield call(createTag, payload);\n    yield put(createTagSuccess(data));\n  } catch (error) {\n    yield put(createTagFailure(error));\n  }\n}\n\nfunction* editTagSaga({ payload: { id, text } }) {\n  try {\n    const { data } = yield call(editTag, id, text);\n    yield put(editTagSuccess(data));\n  } catch (error) {\n    yield put(editTagFailure(error));\n  }\n}\n\nfunction* deleteTagSaga({ payload: { id } }) {\n  try {\n    const { data } = yield call(deleteTag, id);\n    yield put(deleteTagSuccess(data));\n  } catch (error) {\n    yield put(deleteTagFailure(error));\n  }\n}\n\nexport default function* tagsSaga() {\n  yield all([\n    takeLatest(GET_TAGS.START, getTagsSaga),\n    takeLatest(EDIT_TAG.START, editTagSaga),\n    takeLatest(DELETE_TAG.START, deleteTagSaga),\n    takeLatest(CREATE_TAG.START, createTagSaga),\n  ]);\n}\n"]},"metadata":{},"sourceType":"module"}